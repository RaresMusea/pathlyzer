generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String                 @id @default(cuid())
  name              String?
  username          String?                @unique
  email             String?                @unique
  emailVerified     DateTime?              @map("email_verified")
  image             String?
  password          String?
  role              UserRole               @default(USER)
  is2FAEnabled      Boolean                @default(false)
  accounts          Account[]
  Enrollment        Enrollment[]
  LearningSession   LearningSession[]
  LessonProgress    LessonProgress[]
  Project           Project[]
  TwoFAConfirmation TwoFactorConfirmation?
  UnitProgress      UnitProgress[]
  UserStats         UserStats?
  UserCooldown      UserCooldown?
}

model UserStats {
  id               String   @id @default(uuid())
  userId           String   @unique @map("user_id")
  xp               Int      @default(0)
  level            Int      @default(1)
  lives            Int      @default(5)
  completedQuizzes Int      @default(0) @map("completed_quizzes")
  completedExams   Int      @default(0) @map("completed_exams")
  updatedAt        DateTime @updatedAt @map("updated_at")
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expiresAt DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expiresAt DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expiresAt DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Project {
  id              String            @id
  name            String
  description     String?
  ownerId         String            @map("owner_id")
  template        String
  framework       String?
  visibility      ProjectVisibility @default(PRIVATE)
  awsRelativePath String            @unique @map("aws_relative_path")
  createdAt       DateTime          @default(now()) @map("created_at")
  user            User              @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  @@index([name])
}

model Course {
  id          String           @id @default(uuid())
  name        String           @unique
  imageSrc    Bytes            @map("image_src")
  description String
  difficulty  CourseDifficulty
  available   Boolean          @default(false)
  createdAt   DateTime         @default(now()) @map("created_at")
  updatedAt   DateTime         @updatedAt @map("updated_at")
  Enrollment  Enrollment[]
  units       Unit[]
  tags        CourseTag[]      @relation("CourseToCourseTag")

  @@index([name])
}

model CourseTag {
  id      String   @id @default(uuid())
  name    String   @unique
  courses Course[] @relation("CourseToCourseTag")
}

model Enrollment {
  id                   String   @id @default(uuid())
  userId               String   @map("user_id")
  courseId             String   @map("course_id")
  enrolledAt           DateTime @default(now()) @map("enrolled_at")
  progress             Float    @default(0.0)
  completed            Boolean  @default(false)
  lastAccessedLessonId String?  @map("last_accessed_lesson_id")
  course               Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
}

model Unit {
  id           String         @id @default(uuid())
  courseId     String         @map("course_id")
  examId       String?        @unique @map("exam_id")
  name         String
  description  String
  order        Int
  createdAt    DateTime       @default(now()) @map("created_at")
  updatedAt    DateTime       @updatedAt @map("updated_at")
  Lesson       Lesson[]
  course       Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)
  exam         Quiz?          @relation("UnitExam", fields: [examId], references: [id], onDelete: Cascade)
  UnitProgress UnitProgress[]

  @@unique([courseId, order])
}

model Lesson {
  id              String            @id @default(uuid())
  unitId          String            @map("unit_id")
  title           String
  description     String
  content         Json
  order           Int
  createdAt       DateTime          @default(now()) @map("created_at")
  updatedAt       DateTime          @updatedAt @map("updated_at")
  LearningSession LearningSession[]
  unit            Unit              @relation(fields: [unitId], references: [id], onDelete: Cascade)
  LessonProgress  LessonProgress[]
  Quiz            Quiz?
  LessonPractice  LessonPractice[]

  @@unique([unitId, order])
}

model Quiz {
  id        String     @id @default(uuid())
  lessonId  String?    @unique @map("lesson_id")
  type      QuizType
  title     String
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")
  questions Question[]
  lesson    Lesson?    @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  unit      Unit?      @relation("UnitExam")
}

model Question {
  id          String         @id @default(uuid())
  quizId      String         @map("quiz_id")
  type        QuestionType
  order       Int
  prompt      String
  createdAt   DateTime       @default(now()) @map("created_at")
  updatedAt   DateTime       @updatedAt @map("updated_at")
  rewardXp    Int            @map("reward_xp")
  choices     AnswerChoice[]
  CodeSection CodeSection[]
  quiz        Quiz           @relation(fields: [quizId], references: [id], onDelete: Cascade)

  @@unique([quizId, order])
}

model AnswerChoice {
  id         String   @id @default(uuid())
  questionId String   @map("question_id")
  text       String
  isCorrect  Boolean  @map("is_correct")
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@unique([questionId, text])
}

model CodeSection {
  id         String   @id @default(uuid())
  questionId String   @map("question_id")
  code       String
  language   String?
  correct    String[]
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

model LearningSession {
  id        String    @id @default(uuid())
  userId    String    @map("user_id")
  lessonId  String?   @map("lesson_id")
  startedAt DateTime  @map("started_at")
  endedAt   DateTime? @map("ended_at")
  duration  Int?      @map("duration_seconds")
  lesson    Lesson?   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model LessonProgress {
  id             String   @id @default(uuid())
  userId         String   @map("user_id")
  lessonId       String   @map("lesson_id")
  completed      Boolean  @default(false)
  progress       Float    @default(0)
  accessedAt     DateTime @default(now()) @map("accessed_at")
  lesson         Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  wasLifeGranted Boolean  @default(false) @map("was_life_granted")

  @@unique([userId, lessonId])
}

model UnitProgress {
  id        String  @id @default(uuid())
  userId    String  @map("user_id")
  unitId    String  @map("unit_id")
  completed Boolean @default(false)
  unit      Unit    @relation(fields: [unitId], references: [id], onDelete: Cascade)
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, unitId])
}

model LessonPractice {
  id        String               @id @default(uuid())
  lessonId  String               @unique @map("lesson_id")
  items     LessonPracticeItem[]
  createdAt DateTime             @default(now()) @map("created_at")
  updatedAt DateTime             @updatedAt @map("updated_at")

  lesson Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)
}

model LessonPracticeItem {
  id               String @id @default(uuid())
  lessonPracticeId String @map("lesson_practice_id")
  title            String
  content          String
  duration         Int    @default(30) @map("duration_seconds")

  lessonPractice LessonPractice @relation(fields: [lessonPracticeId], references: [id], onDelete: Cascade)
}

model UserCooldown {
  id              String         @id @default(uuid())
  userId          String         @unique
  reason          CooldownReason
  startedAt       DateTime       @default(now()) @map("started_at")
  durationMinutes Int            @map("cooldown_length_minutes")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
  USER
  ADMINISTRATOR
}

enum CourseDifficulty {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum ProjectVisibility {
  PUBLIC
  PRIVATE
}

enum QuizType {
  LESSON_QUIZ
  UNIT_EXAM
}

enum QuestionType {
  SINGLE
  MULTIPLE
  CODE_FILL
}

enum CooldownReason {
  NORMAL
  FRAUD
}
