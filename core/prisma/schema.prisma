// prisma/schema.prisma

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // uncomment next line if you use Prisma <5.10
  // directUrl = env("DATABASE_URL_UNPOOLED")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  USER
  ADMINISTRATOR
}

enum ProjectVisibility {
  PUBLIC
  PRIVATE
}

model User {
  id                String                 @id @default(cuid())
  name              String?
  username          String?                @unique
  email             String?                @unique
  emailVerified     DateTime?              @map("email_verified")
  image             String?
  password          String?
  role              UserRole               @default(USER)
  accounts          Account[]
  is2FAEnabled      Boolean                @default(false)
  TwoFAConfirmation TwoFactorConfirmation?
  Project           Project[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expiresAt DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expiresAt DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expiresAt DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Project {
  id              String            @id
  name            String
  description     String?
  ownerId         String            @map("owner_id")
  template        String
  framework       String?
  visibility      ProjectVisibility @default(PRIVATE)
  awsRelativePath String            @unique @map("aws_relative_path")
  createdAt       DateTime          @default(now()) @map("created_at")
  user            User              @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  @@index([name])
}