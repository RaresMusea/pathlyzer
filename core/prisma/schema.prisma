// prisma/schema.prisma

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // uncomment next line if you use Prisma <5.10
  // directUrl = env("DATABASE_URL_UNPOOLED")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  USER
  ADMINISTRATOR
}

enum CourseDifficulty {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum ProjectVisibility {
  PUBLIC
  PRIVATE
}

model User {
  id                String                 @id @default(cuid())
  name              String?
  username          String?                @unique
  email             String?                @unique
  emailVerified     DateTime?              @map("email_verified")
  image             String?
  password          String?
  role              UserRole               @default(USER)
  accounts          Account[]
  is2FAEnabled      Boolean                @default(false)
  TwoFAConfirmation TwoFactorConfirmation?
  Project           Project[]
  Enrollment        Enrollment[]
  UserStats         UserStats?
  LessonProgress    LessonProgress[]
  LearningSession   LearningSession[]
  UnitProgress      UnitProgress[]
}

model UserStats {
  id               String   @id @default(uuid())
  userId           String   @unique @map("user_id")
  xp               Int      @default(0)
  level            Int      @default(1)
  lives            Int      @default(5)
  completedQuizzed Int      @default(0) @map("completed_quizzes")
  completedExams   Int      @default(0) @map("completed_exams")
  updatedAt        DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expiresAt DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expiresAt DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expiresAt DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Project {
  id              String            @id
  name            String
  description     String?
  ownerId         String            @map("owner_id")
  template        String
  framework       String?
  visibility      ProjectVisibility @default(PRIVATE)
  awsRelativePath String            @unique @map("aws_relative_path")
  createdAt       DateTime          @default(now()) @map("created_at")
  user            User              @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  @@index([name])
}

model Course {
  id          String           @id @default(uuid())
  name        String           @unique
  imageSrc    Bytes            @map("image_src")
  description String
  difficulty  CourseDifficulty
  available   Boolean          @default(false)
  createdAt   DateTime         @default(now()) @map("created_at")
  updatedAt   DateTime         @updatedAt @map("updated_at")
  tags        CourseTag[]
  Enrollment  Enrollment[]
  units       Unit[]

  @@index([name])
}

model CourseTag {
  id      String   @id @default(uuid())
  name    String   @unique
  courses Course[]
}

model Enrollment {
  id                   String   @id @default(uuid())
  userId               String   @map("user_id")
  courseId             String   @map("course_id")
  enrolledAt           DateTime @default(now()) @map("enrolled_at")
  progress             Float    @default(0.0)
  completed            Boolean  @default(false)
  lastAccessedLessonId String?  @map("last_accessed_lesson_id")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
}

model Unit {
  id          String   @id @default(uuid())
  courseId    String   @map("course_id")
  examId      String?  @unique @map("exam_id")
  name        String
  description String
  order       Int
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  course       Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)
  Lesson       Lesson[]
  exam         Quiz?          @relation("UnitExam", fields: [examId], references: [id], onDelete: Cascade)
  UnitProgress UnitProgress[]

  @@unique([courseId, order])
}

model Lesson {
  id          String   @id @default(uuid())
  unitId      String   @map("unit_id")
  title       String
  description String
  content     Json
  order       Int
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  unit            Unit              @relation(fields: [unitId], references: [id], onDelete: Cascade)
  Quiz            Quiz?
  LessonProgress  LessonProgress[]
  LearningSession LearningSession[]

  @@unique([unitId, order])
}

enum QuizType {
  LESSON_QUIZ
  UNIT_EXAM
}

model Quiz {
  id        String   @id @default(uuid())
  lessonId  String?  @unique @map("lesson_id")
  type      QuizType
  title     String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  lesson    Lesson?    @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  unit      Unit?      @relation("UnitExam")
  questions Question[]
}

enum QuestionType {
  SINGLE
  MULTIPLE
  CODE_FILL
}

model Question {
  id        String       @id @default(uuid())
  quizId    String       @map("quiz_id")
  type      QuestionType
  order     Int
  prompt    String
  rewardXp  Int          @map("reward_xp")
  createdAt DateTime     @default(now()) @map("created_at")
  updatedAt DateTime     @updatedAt @map("updated_at")

  choices     AnswerChoice[]
  quiz        Quiz           @relation(fields: [quizId], references: [id], onDelete: Cascade)
  CodeSection CodeSection[]

  @@unique([quizId, order])
}

model AnswerChoice {
  id         String  @id @default(uuid())
  questionId String  @map("question_id")
  text       String
  isCorrect  Boolean @map("is_correct")

  question Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@unique([questionId, text])
}

model CodeSection {
  id         String   @id @default(uuid())
  questionId String   @map("question_id")
  code       String
  language   String?
  correct    String[]

  question Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

model LearningSession {
  id        String    @id @default(uuid())
  userId    String    @map("user_id")
  lessonId  String?   @map("lesson_id")
  startedAt DateTime  @map("started_at")
  endedAt   DateTime? @map("ended_at")
  duration  Int?      @map("duration_seconds")

  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson Lesson? @relation(fields: [lessonId], references: [id], onDelete: Cascade)
}

model LessonProgress {
  id         String   @id @default(uuid())
  userId     String   @map("user_id")
  lessonId   String   @map("lesson_id")
  completed  Boolean  @default(false)
  progress   Float    @default(0)
  accessedAt DateTime @default(now()) @map("accessed_at")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([userId, lessonId])
}

model UnitProgress {
  id        String  @id @default(uuid())
  userId    String  @map("user_id")
  unitId    String  @map("unit_id")
  completed Boolean @default(false)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  unit Unit @relation(fields: [unitId], references: [id], onDelete: Cascade)

  @@unique([userId, unitId])
}
